import { getOGStorage } from './0g-storage';

interface InferenceRequest {
  model: string;
  prompt: string;
  context?: string;
  maxTokens?: number;
  temperature?: number;
  agentId: string;
  conversationId?: string;
}

interface InferenceResponse {
  response: string;
  model: string;
  usage: {
    inputTokens: number;
    outputTokens: number;
    totalTokens: number;
  };
  metadata: {
    agentId: string;
    conversationId?: string;
    timestamp: string;
    computeProvider: '0g';
  };
}

interface InferenceOptions {
  fallbackToOpenAI?: boolean;
  openaiApiKey?: string;
  retryAttempts?: number;
}

export class InferenceClient {
  private ogStorage: any;
  private options: InferenceOptions;

  constructor(options: InferenceOptions = {}) {
    this.ogStorage = getOGStorage();
    this.options = {
      fallbackToOpenAI: true,
      retryAttempts: 3,
      ...options
    };
  }

  async initialize(): Promise<void> {
    console.log('üß† Initializing Inference Client...');
    await this.ogStorage.initialize();
    console.log('‚úÖ Inference Client initialized successfully');
  }

  async generateResponse(request: InferenceRequest): Promise<InferenceResponse> {
    const startTime = Date.now();

    try {
      console.log(`üß† Generating response for agent: ${request.agentId}`);

      // Prepare the prompt with context if available
      let fullPrompt = request.prompt;
      if (request.context) {
        fullPrompt = `Context: ${request.context}\n\nQuery: ${request.prompt}`;
      }

      // Try 0G Compute first
      let response: string;
      let model: string;
      let usage = { inputTokens: 0, outputTokens: 0, totalTokens: 0 };

      try {
        console.log(`üîÑ Sending request to 0G Compute: ${request.model}`);

        response = await this.ogStorage.computeInference(
          request.model,
          fullPrompt,
          {
            max_tokens: request.maxTokens || 1000,
            temperature: request.temperature || 0.7,
            agentId: request.agentId,
            conversationId: request.conversationId
          }
        );

        model = request.model;
        usage = {
          inputTokens: Math.ceil(fullPrompt.length / 4), // Rough estimation
          outputTokens: Math.ceil(response.length / 4),
          totalTokens: Math.ceil((fullPrompt.length + response.length) / 4)
        };

        console.log(`‚úÖ Response generated by 0G Compute: ${usage.totalTokens} tokens`);
      } catch (ogError) {
        console.warn('‚ö†Ô∏è 0G Compute failed, falling back to OpenAI:', ogError);

        if (this.options.fallbackToOpenAI && this.options.openaiApiKey) {
          response = await this.fallbackToOpenAI(request, fullPrompt);
          model = `fallback-${request.model}`;
          usage = {
            inputTokens: Math.ceil(fullPrompt.length / 4),
            outputTokens: Math.ceil(response.length / 4),
            totalTokens: Math.ceil((fullPrompt.length + response.length) / 4)
          };
        } else {
          throw new Error(`0G Compute failed and no fallback available: ${ogError?.message}`);
        }
      }

      const endTime = Date.now();
      const processingTime = endTime - startTime;

      console.log(`‚úÖ Inference completed in ${processingTime}ms`);

      return {
        response,
        model,
        usage,
        metadata: {
          agentId: request.agentId,
          conversationId: request.conversationId,
          timestamp: new Date().toISOString(),
          computeProvider: '0g'
        }
      };
    } catch (error) {
      console.error('‚ùå Failed to generate inference response:', error);
      throw new Error(`Inference generation failed: ${error?.message}`);
    }
  }

  private async fallbackToOpenAI(request: InferenceRequest, prompt: string): Promise<string> {
    // This would import OpenAI SDK and use it as fallback
    // For now, return a mock response
    console.log('üîÑ Using fallback inference mechanism');

    // Mock response - in real implementation, this would call OpenAI API
    return `Fallback response for: ${prompt.substring(0, 100)}...`;
  }

  async generateStreamingResponse(
    request: InferenceRequest,
    onChunk: (chunk: string) => void,
    onComplete: (fullResponse: string) => void
  ): Promise<void> {
    try {
      console.log(`üß† Generating streaming response for agent: ${request.agentId}`);

      const response = await this.generateResponse(request);

      // Simulate streaming for demo purposes
      const words = response.response.split(' ');
      let streamedResponse = '';

      for (const word of words) {
        streamedResponse += word + ' ';
        onChunk(word + ' ');

        // Small delay to simulate streaming
        await new Promise(resolve => setTimeout(resolve, 50));
      }

      onComplete(streamedResponse.trim());
    } catch (error) {
      console.error('‚ùå Failed to generate streaming response:', error);
      throw new Error(`Streaming inference failed: ${error?.message}`);
    }
  }

  async getAvailableModels(): Promise<string[]> {
    try {
      // In a real implementation, this would query 0G Compute for available models
      console.log('üìã Getting available models from 0G Compute');

      return [
        'llama-2-7b',
        'llama-2-13b',
        'llama-2-70b',
        'codellama-7b',
        'codellama-13b',
        'mistral-7b',
        'mixtral-8x7b'
      ];
    } catch (error) {
      console.error('‚ùå Failed to get available models:', error);
      throw new Error(`Model listing failed: ${error?.message}`);
    }
  }

  async getInferenceStats(): Promise<any> {
    try {
      const stats = await this.ogStorage.getStorageStats();
      return {
        ...stats,
        totalInferences: 0, // Would be tracked in a real implementation
        averageLatency: 0,
        fallbackRate: 0,
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Failed to get inference stats:', error);
      throw new Error(`Inference stats retrieval failed: ${error?.message}`);
    }
  }
}

// Factory function to create inference client
export function getInferenceClient(options?: InferenceOptions): InferenceClient {
  return new InferenceClient(options);
}
